" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

"silent! call pathogen#runtime_append_all_bundles()

"silent! helptags $VIMRUNTIME/doc
"silent! call pathogen#helptags()

execute pathogen#infect()

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

set switchbuf=useopen   " Only have one buffer of a file open at a time
set hidden              " Keep buffers open in the background

" Don't use Ex mode, use Q for quitting when saved
map Q :q<CR>

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Use spaces every 2 characters instead of tabs
set softtabstop=2
set shiftwidth=2
set expandtab

" Navigate between windows easier
map <C-J> <C-W>j
map <C-K> <C-W>k
"map <C-H> <C-W>h
"map <C-L> <C-W>l

" Try using this to navigate between tabs instead of windows
map <C-H> gT
map <C-L> gt

" TRYING SOMETHING NEW FOR NOW. The following is no longer accurate
" ---Default to using a stack style editing (current window always max)---
set winminheight=0
"au VimEnter * set winheight=999
set splitbelow

" Change from using stack style editing to normal, equal sized windows and back
"nmap <silent> <Leader>s :let &winheight = ( &winheight == 999 ? 10 : 999)<CR>
nmap <silent> <C-S> :let &winheight = ( &winheight == 999 ? 10 : 999)<CR><C-W>=


" Keep 2 lines of context when scrolling
set scrolloff=2

set ignorecase
set smartcase
nmap <silent> <Leader><Space> :noh<CR>

" Don't litter the filesystem with .swp files
set directory=~/.vim/swp//

" Rotate between number, relativenumber, and nothing
nmap <silent> <C-N><C-N> :exec 'set ' &nu+&rnu ? 'rnu!' : 'nu'<CR>
nmap <silent> <C-W><C-W> :set invwrap<CR>
nmap <silent> <C-G><C-G> :let &background = ( &background == "dark" ? "light" : "dark" )<CR>
nmap <silent> <C-Z><C-Z> :let &foldcolumn = ( &foldcolumn == 0 ? 5 : 0 )<CR>

" Open/close folds with space
nmap <Space> za

" Select some text and search with it
vmap // y/<C-R>"<CR>
vmap ?? y?<C-R>"<CR>

" Wrapped line movement
map <Up> gk
map <Down> gj

" Goto file in another window and navigate back to this window
map gf <C-W><C-F><C-K>

" Execute macro in the 'q' register.
map <C-Q> @q

" More useful mappings to find the latest { or }
nmap [[ [{
nmap ]] ]}

let Tlist_Close_On_Select=1
nmap <M-?> :NERDTreeToggle<CR>

filetype plugin on

let html_use_css = 1
let g:lisp_rainbow = 1
let g:xml_syntax_folding=1
let g:xml_syntax_folding=1
let NERDTreeQuitOnOpen = 1

"Vim Clojure stuff
let vimclojure#HighlightBuiltins = 1
let vimclojure#ParenRainbow=1
let vimclojure#WantNailgun=1
let vimclojure#DynamicHighlighting=1
let vimclojure#SplitSize=15
let vimclojure#FuzzyIndent = 1

let g:paredit_leader = '_'
let g:paredit_mode=1

" ZenCoding
let g:user_zen_leader_key = '<c-Space>'
let g:use_zen_complete_tag = 1
let user_zen_expandabbr_key = '<C-Space><C-Space>'
let user_zen_prev_key = '<C-Space>p'
let g:user_zen_settings = {
      \  'xhtml' : {
      \    'indentation' : '  '
      \  },
      \  'html' : {
      \    'indentation' : '  '
      \  },
      \}

"colorscheme desert
"colorscheme solarized
colorscheme vividchalk
set nowrap
set linebreak
set relativenumber
set visualbell

" Use man in a new window
runtime! ftplugin/man.vim
"nmap K <Leader>K
"vmap K "my:Man <C-R>m<CR>

" Change directory of the current buffer to be the same as the file
command! -n=0 Cdl lcd %:p:h

" If forgot to edit a file with sudo
command! W w !sudo tee % > /dev/null

"No more accidently hitting <F1>
map <F1> <Nop>
map <D-F1> <Nop>

" Powerline
set laststatus=2
set t_Co=256 " Explicitly tell vim that the terminal supports 256 colors
set encoding=utf-8 " Necessary to show unicode glyphs
let Powerline_stl_path_style="short"

" Trying these out; we'll see if I like/use it
imap jk <ESC>
nmap <silent> <Leader>w :w<CR>
nmap <silent> <Leader>W :wa<CR>

let g:ScreenImpl='Tmux'

let g:CommandTMaxHeight=10
let g:CommandTMinHeight=10

nmap <Leader>s :Sscratch<CR>

" Cmd-[1-9] will open that numbered tab
map <silent> <D-1> <ESC>1gt
map <silent> <D-2> <ESC>2gt
map <silent> <D-3> <ESC>3gt
map <silent> <D-4> <ESC>4gt
map <silent> <D-5> <ESC>5gt
map <silent> <D-6> <ESC>6gt
map <silent> <D-7> <ESC>7gt
map <silent> <D-8> <ESC>8gt
map <silent> <D-9> <ESC>9gt

set guitablabel=%M(%N)\ %t

match ErrorMsg '  *$'

cnoremap %% <C-R>=expand('%:h').'/'<CR>
nmap <Leader><Leader> <C-^>

let maplocalleader=","

nnoremap g/ /\v

let g:ackprg = 'ag --nogroup --nocolor --column'
